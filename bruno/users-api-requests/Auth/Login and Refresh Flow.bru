meta {
  name: Login and Refresh Flow
  type: http
  seq: 12
}

post {
  url: {{baseUrl}}/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "admin@example.com",
    "password": "admin123"
  }
}

script:post-response {
  if (res.status === 200) {
    // Extract refresh token from Set-Cookie header
    const setCookieHeader = res.headers['set-cookie'];
    let refreshToken = null;
    
    if (Array.isArray(setCookieHeader)) {
      const refreshCookie = setCookieHeader.find(cookie => cookie.startsWith('refreshToken='));
      if (refreshCookie) {
        refreshToken = refreshCookie.split('=')[1].split(';')[0];
      }
    } else if (setCookieHeader && setCookieHeader.includes('refreshToken=')) {
      refreshToken = setCookieHeader.split('refreshToken=')[1].split(';')[0];
    }
    
    if (refreshToken) {
      bru.setVar("refreshToken", refreshToken);
      console.log("Refresh token extracted and stored:", refreshToken.substring(0, 20) + "...");
    }
    
    // Store access token for other requests
    if (res.body.accessToken) {
      bru.setVar("accessToken", res.body.accessToken);
      console.log("Access token stored");
    }
  }
}

tests {
  test("should login successfully", function() {
    expect(res.status).to.equal(200);
    expect(res.body).to.have.property('accessToken');
    expect(res.body).to.have.property('email');
    expect(res.body).to.have.property('userId');
  });
  
  test("should set refresh token cookie", function() {
    const setCookieHeader = res.headers['set-cookie'];
    expect(setCookieHeader).to.exist;
    
    let hasRefreshToken = false;
    if (Array.isArray(setCookieHeader)) {
      hasRefreshToken = setCookieHeader.some(cookie => cookie.includes('refreshToken='));
    } else {
      hasRefreshToken = setCookieHeader.includes('refreshToken=');
    }
    
    expect(hasRefreshToken).to.be.true;
  });
}

docs {
  Complete login flow that extracts and stores the refresh token for use in subsequent refresh requests.
  This should be run first to get a valid refresh token for testing other refresh endpoints.
}